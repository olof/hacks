#!/usr/bin/perl
# The purpose of this script is to clean up w3m output a bit,
# before presenting to the user in his/her mail user agent.
# Cleaning means fiddling with whitespace and (optionally)
# shorten obnoxiously long URLs. If the URL is wider than my
# terminal, copying it becomes a pain.
#
# To enable URL shortening, set the environment variable
# $MAILCAP_HTML_URL_SHORTENER to a URL providing the following
# simple API: You POST a text/plain with the url to it, and get
# back a text/plain with a new url. This script does not care
# about the behavior of this shortening service besides this
# specification, and is up to you and your requirements.
# Implement it however you like.
#
# The URL shortening behavior is only used when a URL longer
# than $MAILCAP_HTML_URL_SHORTENER_MIN_LEN (default 80 chars)
# is encountered. Shorter URLs are passed on as is.
#
### TODO:
# * Async http requests? This could potentially help shortening
#   the time until the email is rendered for the user, when the
#   email contains many links.
use 5.020;
use LWP::UserAgent ();

my $shorturl = $ENV{MAILCAP_HTML_URL_SHORTENER};
my $shorturl_limit = $ENV{MAILCAP_HTML_URL_SHORTENER_MIN_LEN} // 80;
my $ua = LWP::UserAgent->new(timeout => 10);
$ua->env_proxy;

my $render = do { local $/; <> };

my ($text, $refs) = $render =~ m{
	(.*)

	(?<=\n)References:\n+

	(?:
		(?<=\n)
		(
			\[[0-9+]\]
			\ 
			(?:https?|file|mailto|tel|ftp|git):.+
		)
		\n
	)*
	\n*$
}sx;
my @refs = split /\n/, $refs;

$text =~ s/^\s+$//m;
$text =~ s/\n\n+/\n\n/g;
print $text;
print "\nReferences:\n" if @refs;
for (@refs) {
	my ($id, $actual_url) = /^\[([0-9]+)\] (.*)$/;
	my $url = $actual_url;
	if ($shorturl and length $url > $shorturl_limit) {
		my $res = $ua->post($shorturl,
			'Content-Type' => 'text/plain',
			Content => $url,
		);
		if ($res->is_success) {
			$url = $res->decoded_content;
			chomp $url;
		}
	}
	say "[$id]: $url";
}
