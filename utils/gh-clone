#!/bin/sh
# Copyright 2015, Olof Johansson <olof@ethup.se>
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved. This file is offered as-is,
# without any warranty.
#
#### README:
#
# Usage:
#   gh-clone <user> <repo>
#   gh-clone <git clone url>
#
# This script clones a git repository from github, in a path decided
# based on the github account name (<user> argument). The user and
# repo can also be extracted from a github clone url. Note that in
# this case, github enterprise is currently not supported, but should
# be easy enough to add if needed.
#
# The base directory is specified in the $GH_CLONE_REPO_BASE environment
# variable, which defaults to $HOME/src/github.
#
# By default, the script will clone using ssh, but you can override
# that by setting the $GH_CLONE_URL_PREFIX, e.g.:
#    GH_CLONE_URL_PREFIX=git://github.com/
# Or...
#    GH_CLONE_URL_PREFIX=https://github.com/
# This same mechanism can also be used for github enterprise installs.
#
# Final note: This script is designed so that it can be sourced, in
# which case you will change directory to the repository when done.
# To avoid the awkard . gh-clone syntax, you can alias this in your
# ~/.${SHELL}rc. For instance I do: alias gh='. gh-clone'
#
# (I would avoid the temption of calling it ghc, since that's a haskell
# compiler. Just fyi :).)

GH_CLONE_REPO_BASE=${GH_CLONE_REPO_BASE:-$HOME/src/github}
GH_CLONE_URL_PREFIX=${GH_CLONE_URL_PREFIX:-git@github.com:}
# Or...
#GH_CLONE_URL_PREFIX=git://github.com/
# Or...
#GH_CLONE_URL_PREFIX=https://github.com/

USER=$1
REPO=$2

die() {
	echo "Error: $@" >&2
	exit 1
}

extract_from_uri() {
	# FIXME: does not support github enterprise installs.
	# pull requests welcome.
	local uri="$1" part

	for pattern in git@github.com: \
	               https://github.com/ \
	               git://github.com/; do
		part=${uri#$pattern}
		[ "$uri" != "$part" ] || continue

		# Note, if supplied with paths containing multiple
		# slashes, it's a bad clone URL. But it will fail
		# later.
		USER=${part%/*}
		REPO=${part#*/}

		# For are only interested in the repo name, not the
		# .git directory suffix.
		REPO=${REPO%.git}

		break
	done

}

if [ "$USER" ] && [ -z "$REPO" ]; then
	extract_from_uri "$USER"
fi

gh_user_dir="$GH_CLONE_REPO_BASE/$USER"
gh_repo_dir="$gh_user_dir/$REPO"

( # subshell so that we can safely die within
set -e

{ [ "$USER" ] && [ "$REPO" ]; } || die "Must be called with user and repo args"

[ -e "$gh_user_dir" ] || mkdir -p "$gh_user_dir"
[ -d "$gh_user_dir" ] || die "Hum, $gh_user_dir exists but isn't a directory"

if [ -e "$gh_repo_dir" ]; then
	[ -d "$gh_repo_dir" ] ||
		die "Hum, $gh_repo_dir exists but isn't a directory"
	[ -d "$gh_repo_dir/.git" ] ||
		die "Hum, $gh_repo_dir exists but isn't a git repo"

	cd "$gh_repo_dir"
	echo "Info: repo is already cloned. Doing a fetch." >&2
	git fetch -p
else
	cd "$gh_user_dir"
	git clone ${GH_CLONE_URL_PREFIX}$USER/$REPO.git
fi
) && cd "$gh_repo_dir"

retval=$?
unset USER REPO gh_user_dir gh_repo_dir
[ $retval -eq 0 ]
