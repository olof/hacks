#!/usr/bin/perl
# ex: ts=4:noet:sw=4
# unicodize-box: convert your shabby ascii boxes to unicode
#
# Reads from stdin or takes a filename as a parameter. Filters the file
# and looks for boxes of "-" and "|" characters. Should not touch those
# characters when they are not a part of a box.
#
# Try the script by running it on itself. There's some shabby ascii boxes
# at the bottom.
use 5.020;
use Getopt::Long qw(:config gnu_getopt);
use charnames qw(:full);
use open qw/:std :utf8/;
use locale;

GetOptions(my $opts = {
	'box-variant' => 'light',
	'box-class' => 'box drawings',
}, qw(
	box-variant=s
	corner-variant=s
	box-class=s
)) or exit 1;

# Try --corner-variant="light arc".
$opts->{'corner-variant'} //= $opts->{'box-variant'};

my %theme_map = map
	{ $_->[0] => charnames::string_vianame(
		uc "$opts->{'box-class'} $opts->{($_->[2] // 'box').'-variant'} $_->[1]"
	) }
	(
		[corner_dl => "up and right", "corner"],
		[corner_dr => "up and left", "corner"],
		[corner_ul => "down and right", "corner"],
		[corner_ur => "down and left", "corner"],
		[hedge => "horizontal"],
		[vedge => "vertical"]
	);

sub theme { $theme_map{shift()} }

sub parseline {
	local $_ = shift;

	/^
		(?:
			(?P<prefix>.*?)
			(?:
				(?<hedge>-{2,})
			|
				(?<vedge>\|)(?<content>[^|]*)\|
			)
			(?P<suffix>.*)
		|
			(?P<verbatim>.*)
		)
	$/sx;

	my $start = length($+{prefix}) or 0;
	my $end = $start +
		($+{hedge} ? (length $+{hedge}) : 0) +
		($+{vedge} ? (2 + length $+{content}) : 0) +
		($+{verbatim} ? (length $+{verbatim}) : 0 );
	return { %+, raw => $&, start => $start, end => $end };
}

sub extend_vedge_start {
	my ($line) = @_;
	my ($prefix, $content, $suffix) = split /\|/, "$line->{content}|$line->{suffix}", 3;

	$prefix = $line->{prefix} . "|$prefix";
	my $start = length $prefix;
	my $ret = {
		%$line,
		prefix => $prefix,
		suffix => $suffix,
		content => $content,
		start => length $prefix,
	};
	return extend_vedge_end($ret) if $ret->{start} == $ret->{end};
	return $ret
}

sub extend_vedge_end {
	my ($line) = @_;
	my ($content, $suffix) = split /\|/, $line->{suffix}, 2;
	if ($content eq $line->{suffix}) {
		return {
			verbatim => $line->{raw},
		}
	}
	return {
		%$line,
		content => "$line->{content}|$content",
		suffix => $suffix,
		end => $line->{end} + 1 + length $content,
	}
}

sub process_hedge {
	my ($prev, $line) = @_;
	if ($prev->{vedge}) {
		$line->{hedge} = join("",
			theme('corner_dl'),
			theme('hedge') x ((length $line->{hedge}) - 2),
			theme('corner_dr'),
		);
		$prev->{vedge} = theme('vedge')
	}
	return ($prev, $line);
}

sub process_vedge {
	my ($prev, $line) = @_;
	return ($prev, $line) if defined $line->{verbatim};
	if ($prev->{hedge} or $prev->{vedge}) {
		$line->{vedge} = theme('vedge');
		return process_vedge($prev, extend_vedge_start($line))
			if $prev->{start} != $line->{start};
		return process_vedge($prev, extend_vedge_end($line))
			if $prev->{end} != $line->{end};

		if ($prev->{hedge}) {
			$prev->{hedge} = join("",
				theme('corner_ul'),
				theme('hedge') x ((length $prev->{hedge}) - 2),
				theme('corner_ur'),
			)
		}
	} else {
		$line = { verbatim => join("", @$line{qw(
			prefix vedge content vedge suffix
		)}) },
	}
	return ($prev, $line);
}

sub process {
	my ($prev, $line) = @_;
	return ($prev, $line) if $prev->{prefix} ne $line->{prefix};
	return process_hedge($prev, $line) if $line->{hedge};
	return process_vedge($prev, $line) if $line->{vedge};
	return ($prev, $line);
}

sub render {
	my $line = shift;
	return $line->{verbatim} if exists $line->{verbatim};
	my @body;
	@body = ('vedge', 'content', 'vedge') if exists $line->{content};
	@body = 'hedge' if exists $line->{hedge};
	return join('',
		@$line{'prefix', @body, 'suffix'}
	);
}

my @output;
my $prev = parseline(scalar <>);
while (my $line = <>) {
	$line = parseline($line);
	($prev, $line) = process($prev, $line);
	print render($prev);
	$prev = $line;
}
print render($prev);

# demo: run the script on the script
# -----
# |   |
# | . |
# |   |
# -----
# x --
# x ||
# x --
# -- --
# || ||
# -- --
#  -------
#  -----
#  | | |
#  -----
# ---------------------------  -----
# |           |             |  | | |
# | ceci n'est pas une pipe |  -----
# ---------------------------
