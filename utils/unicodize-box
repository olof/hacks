#!/usr/bin/perl
# ex: ts=4:noet:sw=4
# unicodize-box: convert your shabby ascii boxes to unicode
#
# Reads from stdin or takes a filename as a parameter. Filters the file
# and looks for boxes of "-" and "|" characters. Should not touch those
# characters when they are not a part of a box.
#
# Try the script by running it on itself. There's some shabby ascii boxes
# at the bottom.
use 5.020;
use Getopt::Long qw(:config gnu_getopt);
use charnames qw(:full);
use open qw/:std :utf8/;
use locale;

GetOptions(my $opts = {
	'box-variant' => 'light',
	'box-class' => 'box drawings',
}, qw(
	box-variant=s
	corner-variant=s
	box-class=s
)) or exit 1;

# Try --corner-variant="light arc".
$opts->{'corner-variant'} //= $opts->{'box-variant'};

my %theme_map = map
	{ $_->[0] => charnames::string_vianame(
		uc "$opts->{'box-class'} $opts->{($_->[2] // 'box').'-variant'} $_->[1]"
	) }
	(
		[corner_dl => "up and right", "corner"],
		[corner_dr => "up and left", "corner"],
		[corner_ul => "down and right", "corner"],
		[corner_ur => "down and left", "corner"],
		[hedge => "horizontal"],
		[vedge => "vertical"]
	);

sub thm { $theme_map{shift()} }

sub parseline {
	local $_ = shift;

	/^
		(?:
			(?P<prefix>[\h#]*)
			(?:
				(?<hedge>-{2,})
			|
				(?<vedge>\|)(?<content>.*)\k<vedge>
			)
			(?P<suffix>.*)
		|
			(?P<verbatim>.*)
		)
	$/sx;

	return { %+ };
}

sub process_hedge {
	my ($prev, $line) = @_;
	if ($prev->{vedge}) {
		$line->{hedge} = join("",
			thm('corner_dl'),
			thm('hedge') x ((length $line->{hedge}) - 2),
			thm('corner_dr'),
		);
		$prev->{vedge} = thm('vedge')
	}
	return ($prev, $line);
}

sub process_vedge {
	my ($prev, $line) = @_;
	if ($prev->{hedge} or $prev->{vedge}) {
		$line->{vedge} = thm('vedge');
		if ($prev->{hedge}) {
			$prev->{hedge} = join("",
				thm('corner_ul'),
				thm('hedge') x ((length $prev->{hedge}) - 2),
				thm('corner_ur'),
			)
		}
	} else {
		$line = { verbatim => join("", @$line{qw(
			prefix vedge content vedge suffix
		)}) },
	}
	return ($prev, $line);
}

sub process {
	my ($prev, $line) = @_;
	return ($prev, $line) if $prev->{prefix} ne $line->{prefix};
	return process_hedge($prev, $line) if $line->{hedge};
	return process_vedge($prev, $line) if $line->{vedge};
	return ($prev, $line);
}

sub render {
	my $line = shift;
	return $line->{verbatim} if exists $line->{verbatim};
	my @body;
	@body = ('vedge', 'content', 'vedge') if exists $line->{content};
	@body = 'hedge' if exists $line->{hedge};
	return join('',
		@$line{'prefix', @body, 'suffix'}
	);
}

my @output;
my $prev = parseline(scalar <>);
while (my $line = <>) {
	$line = parseline($line);
	($prev, $line) = process($prev, $line);
	print render($prev);
	$prev = $line;
}
print render($prev);

# demo: run the script on the script
# -----
# |   |
# | . |
# |   |
# -----
#
# --
# ||
# --
#
#  -------
#
# ---------------------------
# |           |             |
# | ceci n'est pas une pipe |
# ---------------------------
